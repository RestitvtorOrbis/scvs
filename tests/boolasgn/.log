Coverity Build Capture version 6.0.1 on Linux 2.6.32-41-generic i686
Internal version numbers: 1.5222:3042, 20120412041511UTC, p-berkeley-push-11376.367

gcc -std=c99  -I./ -I../../../include/ boolasgn_e01.c -o boolasgn_e01.o
gcc -std=c99  -I./ -I../../../include/ boolasgn_e02.c -o boolasgn_e02.o
gcc -std=c99  -I./ -I../../../include/ boolasgn_e03.c -o boolasgn_e03.o
gcc -std=c99  -I./ -I../../../include/ boolasgn_e04.c -o boolasgn_e04.o
gcc -std=c99  -I./ -I../../../include/ boolasgn_e05.c -o boolasgn_e05.o
gcc -std=c99  -I./ -I../../../include/ boolasgn_e06.c -o boolasgn_e06.o
gcc -std=c99  -I./ -I../../../include/ boolasgn_e07.c -o boolasgn_e07.o
7 C/C++ compilation units (100%) are ready for analysis
The cov-build utility completed successfully.
Coverity Static Analysis for C/C++ version 6.0.1 on Linux 2.6.32-41-generic i686
Internal version numbers: 1.5222:3042, 20120412041511UTC, p-berkeley-push-11376.367

[WARNING] This program requires 1536 MiB of free memory to run properly,
but this machine has only 497 MiB of physical memory.
It might run slowly due to insufficient memory.
Looking for translation units
|0----------25-----------50----------75---------100|
****************************************************
[STATUS] Computing links for 7 translation units
|0----------25-----------50----------75---------100|
****************************************************
[STATUS] Computing virtual overrides
|0----------25-----------50----------75---------100|
****************************************************
[STATUS] Computing callgraph
|0----------25-----------50----------75---------100|
****************************************************
[STATUS] Topologically sorting 9 functions
|0----------25-----------50----------75---------100|
****************************************************
[STATUS] Computing node costs
|0----------25-----------50----------75---------100|
****************************************************
[STATUS] Starting analysis run
|0----------25-----------50----------75---------100|
****************************************************
[STATUS] Starting analysis run (types/warnings pass)
|0----------25-----------50----------75---------100|
****************************************************
Analysis summary report:
------------------------
Files analyzed                  : 7
Total LoC input to cov-analyze  : 7265
Functions analyzed              : 9
Paths analyzed                  : 40
Time taken by Coverity analysis : 00:00:01
Defect occurrences found        : 3 Total
                                  2 DEADCODE
                                  1 SECURE_CODING

Error: DEADCODE:
/home/benito/Work/scvs/tests/Clause5/5/boolasgn_e06.c:68:
dead_error_condition: On this path, the condition "flag" cannot be true.
/home/benito/Work/scvs/tests/Clause5/5/boolasgn_e06.c:66:
assignment: Assigning: "flag" = "0U".
/home/benito/Work/scvs/tests/Clause5/5/boolasgn_e06.c:66:
const: After this line, the value of "flag" is equal to 0.
/home/benito/Work/scvs/tests/Clause5/5/boolasgn_e06.c:69:
dead_error_line: Execution cannot reach this statement "printf("x = %d, y = %d\n", ...".
Error: DEADCODE:
/home/benito/Work/scvs/tests/Clause5/5/boolasgn_e01.c:66:
dead_error_condition: On this path, the condition "x = y" cannot be false.
/home/benito/Work/scvs/tests/Clause5/5/boolasgn_e01.c:64:
assignment: Assigning: "y" = "1".
/home/benito/Work/scvs/tests/Clause5/5/boolasgn_e01.c:66:
assignment: Assigning: "x" = "y".
/home/benito/Work/scvs/tests/Clause5/5/boolasgn_e01.c:64:
const: After this line, the value of "y" is equal to 1.
/home/benito/Work/scvs/tests/Clause5/5/boolasgn_e01.c:66:
const: After this line, the value of "x" is equal to 1.
/home/benito/Work/scvs/tests/Clause5/5/boolasgn_e01.c:70:
dead_error_line: Execution cannot reach this statement "return 0;".
Error: SECURE_CODING:
/home/benito/Work/scvs/tests/Clause5/5/boolasgn_e02.c:76:
secure_coding: [VERY RISKY]. Using "rand(void)" can cause a insecure series of predictable numbers when done incorrectly.  rand() is not a very good random number generator.  It uses a 32 bit seed and maintains a 32 bit state.  The output is 32 bits in length making it a simple matter to determine the function's internal state by examining the output.  As a result, rand() is not very random. Use /dev/random or /dev/urandom instead.
